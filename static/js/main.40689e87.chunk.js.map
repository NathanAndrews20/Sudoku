{"version":3,"sources":["components/SudokuInstance/Cell.jsx","components/SudokuInstance/SudokuBoard.jsx","utils/UtilityFunctions.js","utils/SudokuChecker.js","components/SudokuInstance/SudokuInstance.jsx","components/SelectDifficultyComponents/DifficultyButton.jsx","components/SelectDifficultyComponents/SelectDifficultyModalBox.jsx","App.js","index.js"],"names":["Cell","cellData","isStatic","onFocus","onChange","useState","value","currentValue","setCurrentValue","textColor","useEffect","id","rowIndex","colIndex","className","event","parseInt","target","subgrid","style","color","backgroundColor","borderWidth","cellBorderWidths","readOnly","maxLength","SudokuBoard","boardObject","currentBoard","setCurrentBoard","locationDataOfFocusedCell","setLocationDataOfFocusedCell","getCellLocationData","coordinatesArray","updateBoard","tempBoard","focusedRow","focusedCol","focusedSubgrid","cellNode","needsHighlight","map","row","getSubgrid","Math","floor","getBorderStyling","majorAxisWidth","cellBorderWidthsArray","reduce","acc","cur","exports","buildBoardObject","boardArray","board","length","boardArrayRow","boardRow","push","checkAllRows","boardObjectRow","set","Set","cellNodeIndex","has","add","size","checkSingleRow","checkIfSolved","temp","transposeBoardObject","checkAllColumns","r","c","checkAllSubgrids","SudokuInstance","boardFromUrl","isSolved","setIsSolved","UtilityFunctions","setBoardObject","onSubmit","SudokuChecker","preventDefault","autoComplete","newBoardObject","type","DifficultyButton","difficulty","onSelection","onClick","SelectDifficultyModalBox","visibility","App","gameInstance","setGameInstance","url","setUrl","needToLoadGame","setNeedToLoadGame","needToSelectDifficulty","setNeedToSelectDifficulty","getBoardFromUrl","a","fetch","rawBoard","json","boardAsJSON","then","response","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40689e87.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nconst staticCellColor = '#000' // black\r\nconst dynamicCellColor = '#315AAF' // dark blue\r\n\r\nconst Cell = ({ cellData, isStatic, onFocus, onChange }) => {\r\n  const [currentValue, setCurrentValue] = useState(cellData.value)\r\n  const textColor = isStatic ? staticCellColor : dynamicCellColor\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(cellData.value)\r\n  }, [cellData.value])\r\n\r\n  return (\r\n    <input\r\n      id={`c${cellData.rowIndex}${cellData.colIndex}`}\r\n      className='cell' \r\n      value={(currentValue === 0) ? \"\" : currentValue}\r\n      onChange={event => {\r\n        setCurrentValue(parseInt(event.target.value) || 0)\r\n        onChange(parseInt(event.target.value) || 0, cellData.rowIndex, cellData.colIndex)\r\n      }}\r\n      onFocus={() => onFocus([cellData.rowIndex, cellData.colIndex, cellData.subgrid])}\r\n      style={{color: textColor, backgroundColor: cellData.color, borderWidth: cellData.cellBorderWidths}}\r\n      readOnly={isStatic}\r\n      maxLength={1}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Cell","import React, { useEffect, useState } from 'react'\r\nimport Cell from './Cell'\r\n\r\nconst focusedCellColor = '#BDDBFE' // lightblue\r\nconst focusedRowColSubgridColor = '#E1E6EC' // lightgrey\r\nconst defaultCellColor = '#FEFEFE' // white\r\n\r\nconst SudokuBoard = ({ boardObject, onChange }) => {\r\n  const [currentBoard, setCurrentBoard] = useState(boardObject)\r\n  const [locationDataOfFocusedCell, setLocationDataOfFocusedCell] = useState([])\r\n\r\n  const getCellLocationData = (coordinatesArray) => {\r\n    setLocationDataOfFocusedCell(coordinatesArray)\r\n  }\r\n\r\n  const updateBoard = (value, rowIndex, colIndex) => {\r\n    const tempBoard = [...currentBoard]\r\n    tempBoard[rowIndex][colIndex].value = value\r\n    setCurrentBoard(tempBoard)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const tempBoard = [...boardObject]\r\n    const [focusedRow, focusedCol, focusedSubgrid] = locationDataOfFocusedCell\r\n    for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < 9; colIndex++) {\r\n        const cellNode = tempBoard[rowIndex][colIndex]\r\n        if (focusedRow === cellNode.rowIndex && focusedCol === cellNode.colIndex) {\r\n          tempBoard[rowIndex][colIndex].color = focusedCellColor\r\n          continue\r\n        }\r\n        const needsHighlight = (focusedRow === cellNode.rowIndex || focusedCol === cellNode.colIndex || focusedSubgrid === cellNode.subgrid)\r\n        tempBoard[rowIndex][colIndex].color = needsHighlight ? focusedRowColSubgridColor : defaultCellColor\r\n      }\r\n    }\r\n    setCurrentBoard(tempBoard)\r\n  }, [boardObject, locationDataOfFocusedCell])\r\n\r\n  return (\r\n    <div id='sudoku-board' onChange={() => onChange(currentBoard)}>\r\n      {currentBoard.map(row => \r\n        row.map(cellNode => \r\n          <Cell key={`${cellNode.rowIndex}${cellNode.colIndex}`}\r\n            cellData={cellNode}\r\n            isStatic={cellNode.isStatic}\r\n            onFocus={getCellLocationData}\r\n            onChange={updateBoard}\r\n          />\r\n        )\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SudokuBoard","const getSubgrid = (rowIndex, colIndex) => {\r\n  const rowSubgrid = Math.floor(rowIndex/3)\r\n  const colSubgrid = Math.floor(colIndex/3)\r\n  return 3*rowSubgrid + colSubgrid\r\n}\r\n\r\nconst getBorderStyling = (rowIndex, colIndex, majorAxisWidth) => {\r\n  const cellBorderWidthsArray = [0,0,0,0]\r\n  if (rowIndex === 3 || rowIndex === 6) cellBorderWidthsArray[0] = majorAxisWidth\r\n  if (colIndex === 3 || colIndex === 6) cellBorderWidthsArray[3] = majorAxisWidth\r\n  return cellBorderWidthsArray.reduce((acc, cur) => acc + `${cur}vmin `, '')\r\n}\r\n\r\nconst buildBoardObject = boardArray => {\r\n  const board = []\r\n  for (let rowIndex = 0; rowIndex < boardArray.length; rowIndex++) {\r\n    const boardArrayRow = boardArray[rowIndex]\r\n    const boardRow = []\r\n    for (let colIndex = 0; colIndex < boardArrayRow.length; colIndex++) { \r\n      boardRow.push({\r\n        rowIndex,\r\n        colIndex,\r\n        subgrid: getSubgrid(rowIndex, colIndex),\r\n        value: boardArray[rowIndex][colIndex],\r\n        isStatic: boardArray[rowIndex][colIndex] !== 0,\r\n        cellBorderWidths: getBorderStyling(rowIndex, colIndex, 0.75)\r\n      })\r\n    }\r\n    board.push(boardRow)\r\n  }\r\n  return board\r\n}\r\n\r\nconst exports = { getSubgrid, getBorderStyling, buildBoardObject }\r\n\r\nexport default exports","const checkSingleRow = boardObjectRow => {\r\n  const set = new Set()\r\n  for (let cellNodeIndex = 0; cellNodeIndex < boardObjectRow.length; cellNodeIndex++) {\r\n    if(set.has(boardObjectRow[cellNodeIndex].value) || boardObjectRow[cellNodeIndex].value === 0) { \r\n      return false \r\n    }\r\n    set.add(boardObjectRow[cellNodeIndex].value)\r\n  }\r\n  return set.size === boardObjectRow.length\r\n}\r\n\r\nconst checkAllRows = boardObject => {\r\n  return boardObject.reduce((acc, cur) => checkSingleRow(cur) && acc, true)\r\n}\r\n\r\nconst transposeBoardObject = boardObject => {\r\n  for (let rowIndex = 0; rowIndex < boardObject.length; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < boardObject.length; colIndex ++) {\r\n      const temp = boardObject[rowIndex][colIndex]\r\n      boardObject[rowIndex][colIndex] = boardObject[colIndex][rowIndex]\r\n      boardObject[colIndex][rowIndex] = temp\r\n    }\r\n  }\r\n  return boardObject\r\n}\r\n\r\nconst checkAllColumns = boardObject => {\r\n  return checkAllRows(transposeBoardObject(boardObject))\r\n}\r\n\r\nconst checkAllSubgrids = boardObject => {\r\n  for (let rowIndex = 0; rowIndex < boardObject.length; rowIndex += 3) {\r\n    for (let colIndex = 0; colIndex < boardObject.length; colIndex += 3) {\r\n      const set = new Set()\r\n      for (let r = rowIndex; r < rowIndex+3; r++) {\r\n        for(let c = colIndex; c < colIndex+3; c++) {\r\n          if (set.has(boardObject[r][c].value)) {\r\n            return false\r\n          }\r\n          set.add(boardObject[r][c].value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nconst checkIfSolved = boardObject => {\r\n  return checkAllRows(boardObject) && checkAllColumns(boardObject) && checkAllSubgrids(boardObject)\r\n}\r\n\r\nconst exports = { checkIfSolved }\r\n\r\nexport default exports","import React, { useEffect, useState } from 'react'\r\nimport SudokuBoard from './SudokuBoard'\r\nimport UtilityFunctions from '../../utils/UtilityFunctions.js'\r\nimport SudokuChecker from '../../utils/SudokuChecker.js'\r\n\r\nconst SudokuInstance = ({ boardFromUrl }) => {\r\n  const [isSolved, setIsSolved] = useState(false)\r\n  const [boardObject, setBoardObject] = useState(UtilityFunctions.buildBoardObject(boardFromUrl))\r\n\r\n  useEffect(() => {\r\n    setBoardObject(UtilityFunctions.buildBoardObject(boardFromUrl))\r\n  }, [boardFromUrl])\r\n\r\n  function getUpdatedBoardObject(newBoardObject){\r\n    setBoardObject(newBoardObject)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    setIsSolved(SudokuChecker.checkIfSolved(boardObject))\r\n    event.preventDefault()\r\n  }\r\n\r\n  return (\r\n    <form id=\"sudoku-instance-form\" onSubmit={handleSubmit} autoComplete='off'>\r\n      <div>This board {isSolved ? \"is\" : \"is not\"} solved</div>\r\n      <SudokuBoard boardObject={boardObject} onChange={getUpdatedBoardObject} boardFromUrl={boardFromUrl}/>\r\n      <input id='submit-button' type=\"submit\" value='How am I doing?'/>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SudokuInstance","import React from 'react'\r\n\r\nconst DifficultyButton = ({ difficulty, onSelection }) => {\r\n  return (\r\n    <button className='difficulty-button' \r\n            onClick={() => onSelection(difficulty)}>\r\n      {difficulty}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default DifficultyButton","import React from 'react';\r\nimport DifficultyButton from './DifficultyButton'\r\n\r\nconst SelectDifficultyModalBox = ({ onSelection, visibility }) => {\r\n  return (\r\n    <div id=\"modal-box-container\" style={{visibility: visibility ? 'visible' : 'hidden'}}>\r\n      <div id=\"select-difficulty-modal-box\">\r\n      <label id=\"select-difficulty-label\">Select Difficulty</label>\r\n      <div id=\"difficulty-button-container\">\r\n        <DifficultyButton difficulty={'easy'} onSelection={onSelection}/>\r\n        <DifficultyButton difficulty={'medium'} onSelection={onSelection}/>\r\n        <DifficultyButton difficulty={'hard'} onSelection={onSelection}/>\r\n        <DifficultyButton difficulty={'random'} onSelection={onSelection}/>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SelectDifficultyModalBox","import React, { useEffect, useState } from 'react'\r\nimport SudokuInstance from './components/SudokuInstance/SudokuInstance'\r\nimport SelectDifficultyModalBox from './components/SelectDifficultyComponents/SelectDifficultyModalBox'\r\n\r\nconst App = () => {\r\n  const [gameInstance, setGameInstance] = useState(<div>Game is Loading</div>)\r\n  const [url, setUrl] = useState('https://sugoku.herokuapp.com/board?difficulty=easy')\r\n  const [needToLoadGame, setNeedToLoadGame] = useState(true)\r\n  const [needToSelectDifficulty, setNeedToSelectDifficulty] = useState(false)\r\n\r\n  const getBoardFromUrl = async (url) => {\r\n    const rawBoard = await fetch(url)\r\n    const boardAsJSON = await rawBoard.json()\r\n    return boardAsJSON\r\n  }\r\n \r\n  useEffect(() => {\r\n    if(needToLoadGame) {\r\n      getBoardFromUrl(url)\r\n      .then(response => {\r\n        setGameInstance( <SudokuInstance boardFromUrl={response.board} /> )\r\n        setNeedToLoadGame(false)\r\n      })\r\n    }\r\n  }, [url, needToLoadGame])\r\n\r\n  const handleDifficultySelection = (difficulty) => {\r\n    setUrl(`https://sugoku.herokuapp.com/board?difficulty=${difficulty}`)\r\n    setNeedToSelectDifficulty(false)\r\n  }\r\n\r\n  const handleNewGame = () => {\r\n    setNeedToLoadGame(true)\r\n  }\r\n\r\n  const handleSelectDifficulty = () => {\r\n    setNeedToSelectDifficulty(true)\r\n  }\r\n\r\n  return (\r\n    <div id='app'>\r\n      <SelectDifficultyModalBox\r\n        onSelection={handleDifficultySelection} \r\n        visibility={needToSelectDifficulty}/>\r\n      <h1 id='heading'>Sudoku</h1>\r\n      <h2 id='sub-heading'>The classic combinatorial game of logic</h2>\r\n      <div id='operation-buttons-container'>\r\n        <button\r\n          id=\"new-game-button\"\r\n          onClick={handleNewGame}>New Game\r\n        </button>\r\n        <button\r\n          id=\"select-difficulty-button\"\r\n          onClick={handleSelectDifficulty}>Select Difficulty\r\n        </button>\r\n      </div>\r\n      {gameInstance}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/sudoku-instance.css'\nimport './styles/select-difficulty.css'\nimport './styles/app.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}